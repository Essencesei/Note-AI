import { authOptions } from "@/lib/db/authOptions";
import notesai from "@/lib/db/pinecone";
import { getEmbedding, openai } from "@/lib/openai/openai";
import { OpenAIStream, StreamingTextResponse } from "ai";
import { getServerSession } from "next-auth";
import { ChatCompletionMessage } from "openai/resources/index.mjs";
import prisma from "@/lib/db/prisma";

export const runtime = "edge";

export async function POST(req: Request) {
  const session = await getServerSession(authOptions);
  const body = await req.json();

  const messages: ChatCompletionMessage[] = body.messages;
  //!! IMPORTANT TRUNCATE TO 6 MESSAGES LIMIT TO SAVE TOKEN !

  const truncatedMessage = messages.slice(-6);

  // generate embedding for each message
  // take the message and join it into one big string isnce getEmbedding is expecting a string

  const embedding = await getEmbedding(
    truncatedMessage.map((m) => m.content).join("\n")
  );

  // query the response in pinecone

  const vectorQueryResponse = await notesai.query({
    vector: embedding,
    topK: 4,
    filter: { authorId: session?.user.id },
  });

  // get the relevantnotes based on vectorQueryResponse in mongodb

  const relevantnotes = await prisma.note.findMany({
    where: {
      id: {
        in: vectorQueryResponse.matches.map((m) => m.id),
        //this code return an array of ids that we got from pinecone
        //and by using in: we only return those notes that have ids in the array since pinecone and note have same id
      },
    },
  });

  // now generate the resopnse for the chatbot
  //instruct the ai using sytem messages

  // now generate the response that will be used by the bot
  const resopnse = await openai.chat.completions.create({
    model: "gpt-3.5-turbo",
    stream: true,
    messages: [
      {
        role: "assistant",
        content:
          "You are an intelligent note taking bot" +
          "You will answer questions about existing notes" +
          `The relevant notes are: ${relevantnotes
            .map((rn) => `Title: ${rn.title}\n\nContent: ${rn.content}`)
            .join("\n\n")} `,
      },
      {
        role: "user",
        content: body.message,
      },
    ],
  });

  const stream = OpenAIStream(resopnse);
  return new StreamingTextResponse(stream);
}
